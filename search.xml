<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/01/HelloWorld/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Fenwick Tree</title>
    <url>/2022/06/02/FenwickTree/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">FenwickTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        T val = <span class="number">0</span>;</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            val += a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FenwickTree</span>(<span class="type">int</span> size) : <span class="built_in">n</span>(size), <span class="built_in">a</span>(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FenwickTree</span>(<span class="type">const</span> std::vector&lt;T&gt; &amp;v) : <span class="built_in">n</span>(<span class="built_in">int</span>(v.<span class="built_in">size</span>())), <span class="built_in">a</span>(n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">add</span>(i, v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos, T val)</span> </span>&#123;</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            a[i - <span class="number">1</span>] += val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span> &lt;= left &amp;&amp; left &lt;= right &amp;&amp; right &lt; n);</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span>(right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span>(right) - <span class="built_in">sum</span>(left - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>tree</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>i128</title>
    <url>/2022/06/03/i128/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> i128 = __int128;</span><br><span class="line"></span><br><span class="line">std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, i128 &amp;x) &#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    std::string s;</span><br><span class="line">    is &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        x = <span class="number">10</span> * x + (c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">        os &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::string s;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            s.<span class="built_in">push_back</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        os &lt;&lt; s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">i128 <span class="title">i128_gcd</span><span class="params">(i128 a, i128 b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">i128_gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>number</tag>
      </tags>
  </entry>
  <entry>
    <title>Segment Tree</title>
    <url>/2022/06/04/SegmentTree/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        T sum;</span><br><span class="line">        T tag;</span><br><span class="line">        <span class="comment">// int cnt = 0;</span></span><br><span class="line">        <span class="built_in">node</span>() : <span class="built_in">sum</span>(<span class="number">0</span>), <span class="built_in">tag</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">mid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;node&gt; tree;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ls</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rs</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert(root &lt; 4 * n);</span></span><br><span class="line">        tree[root].sum = tree[<span class="built_in">ls</span>(root)].sum + tree[<span class="built_in">rs</span>(root)].sum;</span><br><span class="line">        <span class="comment">// tree[root].sum = std::max(tree[ls(root)].sum, tree[rs(root)].sum);</span></span><br><span class="line">        <span class="comment">// tree[root].cnt = tree[m_l(root)].cnt + tree[m_r(root)].cnt;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">const</span> std::vector&lt;T&gt; &amp;num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert(root &lt; 4 * n);</span></span><br><span class="line">        <span class="keyword">if</span> (tree[root].l == tree[root].r) &#123;</span><br><span class="line">            tree[root].sum = num[tree[root].l];</span><br><span class="line">            <span class="comment">// tree[root].cnt = 1;</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = tree[root].<span class="built_in">mid</span>();</span><br><span class="line"></span><br><span class="line">        tree[<span class="built_in">ls</span>(root)].l = tree[root].l;</span><br><span class="line">        tree[<span class="built_in">ls</span>(root)].r = mid;</span><br><span class="line">        tree[<span class="built_in">rs</span>(root)].l = mid + <span class="number">1</span>;</span><br><span class="line">        tree[<span class="built_in">rs</span>(root)].r = tree[root].r;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">build</span>(<span class="built_in">ls</span>(root), num);</span><br><span class="line">        <span class="built_in">build</span>(<span class="built_in">rs</span>(root), num);</span><br><span class="line">        <span class="built_in">push_up</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> root, T val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert(root &lt; 4 * n);</span></span><br><span class="line">        tree[root].tag += val;</span><br><span class="line">        tree[root].sum += (val * (tree[root].r - tree[root].l + <span class="number">1</span>));</span><br><span class="line">        <span class="comment">// tree[root].sum = val;</span></span><br><span class="line">        <span class="comment">// tree[root].sum += (val * tree[root].cnt);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert(root &lt; 4 * n);</span></span><br><span class="line">        <span class="built_in">change</span>(<span class="built_in">ls</span>(root), tree[root].tag);</span><br><span class="line">        <span class="built_in">change</span>(<span class="built_in">rs</span>(root), tree[root].tag);</span><br><span class="line">        tree[root].tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert(root &lt; 4 * n);</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt;= tree[root].l &amp;&amp; tree[root].r &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">change</span>(root, val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(root);</span><br><span class="line">        <span class="type">int</span> mid = tree[root].<span class="built_in">mid</span>();</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) <span class="built_in">update</span>(<span class="built_in">ls</span>(root), left, right, val);</span><br><span class="line">        <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= right) <span class="built_in">update</span>(<span class="built_in">rs</span>(root), left, right, val);</span><br><span class="line">        <span class="built_in">push_up</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    void cnt_update(int root, int pos, int val) &#123;</span></span><br><span class="line"><span class="comment">        assert(root &lt; 4 * n);</span></span><br><span class="line"><span class="comment">        tree[root].cnt += val;</span></span><br><span class="line"><span class="comment">        if (tree[root].l == tree[root].r) &#123;</span></span><br><span class="line"><span class="comment">            return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        push_down(root);</span></span><br><span class="line"><span class="comment">        int mid = tree[root].mid();</span></span><br><span class="line"><span class="comment">        if (pos &lt;= mid) &#123;</span></span><br><span class="line"><span class="comment">            cnt_update(ls(root), pos, val);</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">            cnt_update(rs(root), pos, val);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        push_up(root);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert(root &lt; 4 * n);</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt;= tree[root].l &amp;&amp; tree[root].r &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> tree[root].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">push_down</span>(root);</span><br><span class="line">        <span class="type">int</span> mid = tree[root].<span class="built_in">mid</span>();</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) &#123;</span><br><span class="line">            ans += <span class="built_in">query</span>(<span class="built_in">ls</span>(root), left, right);</span><br><span class="line">            <span class="comment">// ans = max(ans, query(ls(root), left, right));</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= right) &#123;</span><br><span class="line">            ans += <span class="built_in">query</span>(<span class="built_in">rs</span>(root), left, right);</span><br><span class="line">            <span class="comment">// ans = max(ans, query(rs(root), left, right));</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">const</span> std::vector&lt;T&gt; &amp;num) : <span class="built_in">n</span>(num.<span class="built_in">size</span>()), <span class="built_in">tree</span>(num.<span class="built_in">size</span>() * <span class="number">4</span>) &#123;</span><br><span class="line">        tree[<span class="number">0</span>].l = <span class="number">0</span>;</span><br><span class="line">        tree[<span class="number">0</span>].r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">0</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">0</span>, left, right, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">0</span>, left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    void cnt_update(int pos, int val) &#123;</span></span><br><span class="line"><span class="comment">        assert(val == -1 || val == 1);</span></span><br><span class="line"><span class="comment">        push_down(0);</span></span><br><span class="line"><span class="comment">        cnt_update(0, pos, val);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>tree</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>Randomer</title>
    <url>/2022/06/07/Randomer/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">Randomer</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> seed;</span><br><span class="line">    std::mt19937 engine;</span><br><span class="line">    std::uniform_int_distribution&lt;T&gt; distribution;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Randomer</span>(T min, T max) : </span><br><span class="line">      <span class="built_in">seed</span>(std::<span class="built_in">random_device</span>()()), </span><br><span class="line">      <span class="built_in">engine</span>(seed),</span><br><span class="line">      <span class="built_in">istribution</span>(min, max) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// cerr &lt;&lt; seed &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">distribution</span>(engine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
        <category>base</category>
      </categories>
      <tags>
        <tag>rand</tag>
      </tags>
  </entry>
  <entry>
    <title>Timer</title>
    <url>/2022/06/05/Timer/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line">    std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; start, end;</span><br><span class="line"></span><br><span class="line">    std::chrono::duration&lt;<span class="type">float</span>&gt; duration;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Timer</span>() &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;[Start Timer]&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Timer</span>() &#123;</span><br><span class="line">        end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        duration = end - start;</span><br><span class="line">        <span class="type">float</span> ms = duration.<span class="built_in">count</span>() * <span class="number">1000.0f</span>;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;[End Timer] timer took &quot;</span> &lt;&lt; ms &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
        <category>base</category>
      </categories>
      <tags>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Test</title>
    <url>/2022/06/08/PythonTest/</url>
    <content><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_cuda</span>():</span><br><span class="line">    ok = torch.cuda.is_available()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PyTorch:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ok))</span><br><span class="line">    gpu_name = torch.cuda.get_device_name(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;GPU:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(gpu_name))</span><br><span class="line">    cuda_v = torch.version.cuda</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cuda:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(cuda_v))</span><br><span class="line">    cudnn_v = cudnn.version()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cudnn:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(cudnn_v))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_cuda()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_opencv</span>():</span><br><span class="line">    numpy_v = np.__version__</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;numpy:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(numpy_v))</span><br><span class="line">    opencv_v = cv2.__version__</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;opencv:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(opencv_v))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_opencv()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Sparse Table</title>
    <url>/2022/06/06/SparseTable/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">class</span> <span class="title class_">F</span> = std::function&lt;<span class="built_in">T</span>(<span class="type">const</span> T&amp;, <span class="type">const</span> T&amp;)&gt;&gt; </span><br><span class="line"><span class="keyword">class</span> SparseTable &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;T&gt;&gt; mat;</span><br><span class="line">    F func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SparseTable</span>(<span class="type">const</span> std::vector&lt;T&gt;&amp; a, <span class="type">const</span> F&amp; f) : <span class="built_in">n</span>(<span class="built_in">int</span>(a.<span class="built_in">size</span>())), <span class="built_in">func</span>(f) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(n &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// int max_log = 32 - __builtin_clz(n);</span></span><br><span class="line">        <span class="type">int</span> max_log = <span class="built_in">int</span>(<span class="built_in">log2</span>(n)) + <span class="number">1</span>;</span><br><span class="line">        mat.<span class="built_in">resize</span>(max_log);</span><br><span class="line">        mat[<span class="number">0</span>] = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; max_log; i++) &#123;</span><br><span class="line">            <span class="type">int</span> m = n - (<span class="number">1</span> &lt;&lt; i) + <span class="number">1</span>;</span><br><span class="line">            mat[i].<span class="built_in">resize</span>(m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                mat[i][j] = <span class="built_in">func</span>(mat[i - <span class="number">1</span>][j], mat[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span> &lt;= from &amp;&amp; from &lt;= to &amp;&amp; to &lt; n);</span><br><span class="line">        <span class="comment">// int lg = 32 - __builtin_clz(to - from + 1) - 1;</span></span><br><span class="line">        <span class="type">int</span> lg = <span class="built_in">int</span>(<span class="built_in">log2</span>(to - from + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">func</span>(mat[lg][from], mat[lg][to - (<span class="number">1</span> &lt;&lt; lg) + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>MergeSort</title>
    <url>/2022/06/29/MergeSort/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">T <span class="title">MergeSortDo</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, std::vector&lt;U&gt; &amp;a, std::vector&lt;U&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> i = left, j = mid + <span class="number">1</span>, k = left;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[j]) &#123;</span><br><span class="line">            b[k] = a[i];</span><br><span class="line">            i++, k++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = (res + (j - k)) % mod;</span><br><span class="line">            b[k] = a[j];</span><br><span class="line">            j++, k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        b[k] = a[i];</span><br><span class="line">        i++, k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        b[k] = a[j];</span><br><span class="line">        j++, k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">T <span class="title">MergeSortDFS</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, std::vector&lt;U&gt; &amp;a, std::vector&lt;U&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        res = (res + <span class="built_in">MergeSortDFS</span>&lt;T, U&gt;(left, mid, a, b)) % mod;</span><br><span class="line">        res = (res + <span class="built_in">MergeSortDFS</span>&lt;T, U&gt;(mid + <span class="number">1</span>, right, a, b)) % mod;</span><br><span class="line">        res = (res + <span class="built_in">MergeSortDo</span>&lt;T, U&gt;(left, right, a, b)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">T <span class="title">MergeSort</span><span class="params">(std::vector&lt;U&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;U&gt; <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">MergeSortDFS</span>&lt;T, U&gt;(<span class="number">0</span>, a.<span class="built_in">size</span>() - <span class="number">1</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>array</tag>
      </tags>
  </entry>
</search>
